// Package resources provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package resources

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List configured authentication providers.
	// (GET /authentication)
	GetIdentityProviders(w http.ResponseWriter, r *http.Request, params GetIdentityProvidersParams)
	// Configure a new authentication provider.
	// (POST /authentication)
	PostIdentityProviders(w http.ResponseWriter, r *http.Request)
	// Returns the list of supported identity providers.
	// (GET /authentication/providers)
	GetAvailableIdentityProviders(w http.ResponseWriter, r *http.Request, params GetAvailableIdentityProvidersParams)
	// Remove an authentication provider configuration.
	// (DELETE /authentication/{id})
	DeleteIdentityProvidersItem(w http.ResponseWriter, r *http.Request, id string)
	// Get a single authentication provider.
	// (GET /authentication/{id})
	GetIdentityProvidersItem(w http.ResponseWriter, r *http.Request, id string)
	// Update an authentication provider configuration.
	// (PUT /authentication/{id})
	PutIdentityProvidersItem(w http.ResponseWriter, r *http.Request, id string)
	// Returns the list of endpoints implemented by this API.
	// (GET /capabilities)
	GetCapabilities(w http.ResponseWriter, r *http.Request)
	// Get the list of entitlements in JSON format.
	// (GET /entitlements)
	GetEntitlements(w http.ResponseWriter, r *http.Request, params GetEntitlementsParams)
	// Get the list of entitlements as raw text.
	// (GET /entitlements/raw)
	GetRawEntitlements(w http.ResponseWriter, r *http.Request)
	// Get all groups.
	// (GET /groups)
	GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams)
	// Create a new group.
	// (POST /groups)
	PostGroups(w http.ResponseWriter, r *http.Request)
	// Remove a group.
	// (DELETE /groups/{id})
	DeleteGroupsItem(w http.ResponseWriter, r *http.Request, id string)
	// Get a single group.
	// (GET /groups/{id})
	GetGroupsItem(w http.ResponseWriter, r *http.Request, id string)
	// Update a group.
	// (PUT /groups/{id})
	PutGroupsItem(w http.ResponseWriter, r *http.Request, id string)
	// List direct entitlements the group has.
	// (GET /groups/{id}/entitlements)
	GetGroupsItemEntitlements(w http.ResponseWriter, r *http.Request, id string, params GetGroupsItemEntitlementsParams)
	// Add or remove a direct entitlements to/from a group.
	// (PATCH /groups/{id}/entitlements)
	PatchGroupsItemEntitlements(w http.ResponseWriter, r *http.Request, id string)
	// Get the identities of a group.
	// (GET /groups/{id}/identities)
	GetGroupsItemIdentities(w http.ResponseWriter, r *http.Request, id string, params GetGroupsItemIdentitiesParams)
	// Add or remove identities to/from a group.
	// (PATCH /groups/{id}/identities)
	PatchGroupsItemIdentities(w http.ResponseWriter, r *http.Request, id string)
	// Get the roles of a group.
	// (GET /groups/{id}/roles)
	GetGroupsItemRoles(w http.ResponseWriter, r *http.Request, id string, params GetGroupsItemRolesParams)
	// Add or remove a role to/from the group.
	// (PATCH /groups/{id}/roles)
	PatchGroupsItemRoles(w http.ResponseWriter, r *http.Request, id string)
	// Get list of identities.
	// (GET /identities)
	GetIdentities(w http.ResponseWriter, r *http.Request, params GetIdentitiesParams)
	// Add an identity.
	// (POST /identities)
	PostIdentities(w http.ResponseWriter, r *http.Request)
	// Remove an identity.
	// (DELETE /identities/{id})
	DeleteIdentitiesItem(w http.ResponseWriter, r *http.Request, id string)
	// Get a single identity.
	// (GET /identities/{id})
	GetIdentitiesItem(w http.ResponseWriter, r *http.Request, id string)
	// Update an identity.
	// (PUT /identities/{id})
	PutIdentitiesItem(w http.ResponseWriter, r *http.Request, id string)
	// List entitlements the identity has.
	// (GET /identities/{id}/entitlements)
	GetIdentitiesItemEntitlements(w http.ResponseWriter, r *http.Request, id string, params GetIdentitiesItemEntitlementsParams)
	// Add or remove entitlement to/from an identity.
	// (PATCH /identities/{id}/entitlements)
	PatchIdentitiesItemEntitlements(w http.ResponseWriter, r *http.Request, id string)
	// List groups the identity is a member of.
	// (GET /identities/{id}/groups)
	GetIdentitiesItemGroups(w http.ResponseWriter, r *http.Request, id string, params GetIdentitiesItemGroupsParams)
	// Add or remove the identity to/from groups.
	// (PATCH /identities/{id}/groups)
	PatchIdentitiesItemGroups(w http.ResponseWriter, r *http.Request, id string)
	// List roles assigned to the identity.
	// (GET /identities/{id}/roles)
	GetIdentitiesItemRoles(w http.ResponseWriter, r *http.Request, id string, params GetIdentitiesItemRolesParams)
	// Add or remove the identity to/from roles.
	// (PATCH /identities/{id}/roles)
	PatchIdentitiesItemRoles(w http.ResponseWriter, r *http.Request, id string)
	// Get the list of available resources.
	// (GET /resources)
	GetResources(w http.ResponseWriter, r *http.Request, params GetResourcesParams)
	// Get the list of roles.
	// (GET /roles)
	GetRoles(w http.ResponseWriter, r *http.Request, params GetRolesParams)
	// Create a new role.
	// (POST /roles)
	PostRoles(w http.ResponseWriter, r *http.Request)
	// Delete a role.
	// (DELETE /roles/{id})
	DeleteRolesItem(w http.ResponseWriter, r *http.Request, id string)
	// Get a single role.
	// (GET /roles/{id})
	GetRolesItem(w http.ResponseWriter, r *http.Request, id string)
	// Update a role.
	// (PUT /roles/{id})
	PutRolesItem(w http.ResponseWriter, r *http.Request, id string)
	// Get the entitlements of a role.
	// (GET /roles/{id}/entitlements)
	GetRolesItemEntitlements(w http.ResponseWriter, r *http.Request, id string, params GetRolesItemEntitlementsParams)
	// Add or remove a direct entitlements to/from a role.
	// (PATCH /roles/{id}/entitlements)
	PatchRolesItemEntitlements(w http.ResponseWriter, r *http.Request, id string)
	// Returns the OpenAPI spec as a JSON file.
	// (GET /swagger.json)
	SwaggerJson(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List configured authentication providers.
// (GET /authentication)
func (_ Unimplemented) GetIdentityProviders(w http.ResponseWriter, r *http.Request, params GetIdentityProvidersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Configure a new authentication provider.
// (POST /authentication)
func (_ Unimplemented) PostIdentityProviders(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns the list of supported identity providers.
// (GET /authentication/providers)
func (_ Unimplemented) GetAvailableIdentityProviders(w http.ResponseWriter, r *http.Request, params GetAvailableIdentityProvidersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove an authentication provider configuration.
// (DELETE /authentication/{id})
func (_ Unimplemented) DeleteIdentityProvidersItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single authentication provider.
// (GET /authentication/{id})
func (_ Unimplemented) GetIdentityProvidersItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an authentication provider configuration.
// (PUT /authentication/{id})
func (_ Unimplemented) PutIdentityProvidersItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns the list of endpoints implemented by this API.
// (GET /capabilities)
func (_ Unimplemented) GetCapabilities(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the list of entitlements in JSON format.
// (GET /entitlements)
func (_ Unimplemented) GetEntitlements(w http.ResponseWriter, r *http.Request, params GetEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the list of entitlements as raw text.
// (GET /entitlements/raw)
func (_ Unimplemented) GetRawEntitlements(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all groups.
// (GET /groups)
func (_ Unimplemented) GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new group.
// (POST /groups)
func (_ Unimplemented) PostGroups(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove a group.
// (DELETE /groups/{id})
func (_ Unimplemented) DeleteGroupsItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single group.
// (GET /groups/{id})
func (_ Unimplemented) GetGroupsItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a group.
// (PUT /groups/{id})
func (_ Unimplemented) PutGroupsItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List direct entitlements the group has.
// (GET /groups/{id}/entitlements)
func (_ Unimplemented) GetGroupsItemEntitlements(w http.ResponseWriter, r *http.Request, id string, params GetGroupsItemEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add or remove a direct entitlements to/from a group.
// (PATCH /groups/{id}/entitlements)
func (_ Unimplemented) PatchGroupsItemEntitlements(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the identities of a group.
// (GET /groups/{id}/identities)
func (_ Unimplemented) GetGroupsItemIdentities(w http.ResponseWriter, r *http.Request, id string, params GetGroupsItemIdentitiesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add or remove identities to/from a group.
// (PATCH /groups/{id}/identities)
func (_ Unimplemented) PatchGroupsItemIdentities(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the roles of a group.
// (GET /groups/{id}/roles)
func (_ Unimplemented) GetGroupsItemRoles(w http.ResponseWriter, r *http.Request, id string, params GetGroupsItemRolesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add or remove a role to/from the group.
// (PATCH /groups/{id}/roles)
func (_ Unimplemented) PatchGroupsItemRoles(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of identities.
// (GET /identities)
func (_ Unimplemented) GetIdentities(w http.ResponseWriter, r *http.Request, params GetIdentitiesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add an identity.
// (POST /identities)
func (_ Unimplemented) PostIdentities(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove an identity.
// (DELETE /identities/{id})
func (_ Unimplemented) DeleteIdentitiesItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single identity.
// (GET /identities/{id})
func (_ Unimplemented) GetIdentitiesItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an identity.
// (PUT /identities/{id})
func (_ Unimplemented) PutIdentitiesItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List entitlements the identity has.
// (GET /identities/{id}/entitlements)
func (_ Unimplemented) GetIdentitiesItemEntitlements(w http.ResponseWriter, r *http.Request, id string, params GetIdentitiesItemEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add or remove entitlement to/from an identity.
// (PATCH /identities/{id}/entitlements)
func (_ Unimplemented) PatchIdentitiesItemEntitlements(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List groups the identity is a member of.
// (GET /identities/{id}/groups)
func (_ Unimplemented) GetIdentitiesItemGroups(w http.ResponseWriter, r *http.Request, id string, params GetIdentitiesItemGroupsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add or remove the identity to/from groups.
// (PATCH /identities/{id}/groups)
func (_ Unimplemented) PatchIdentitiesItemGroups(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List roles assigned to the identity.
// (GET /identities/{id}/roles)
func (_ Unimplemented) GetIdentitiesItemRoles(w http.ResponseWriter, r *http.Request, id string, params GetIdentitiesItemRolesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add or remove the identity to/from roles.
// (PATCH /identities/{id}/roles)
func (_ Unimplemented) PatchIdentitiesItemRoles(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the list of available resources.
// (GET /resources)
func (_ Unimplemented) GetResources(w http.ResponseWriter, r *http.Request, params GetResourcesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the list of roles.
// (GET /roles)
func (_ Unimplemented) GetRoles(w http.ResponseWriter, r *http.Request, params GetRolesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new role.
// (POST /roles)
func (_ Unimplemented) PostRoles(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a role.
// (DELETE /roles/{id})
func (_ Unimplemented) DeleteRolesItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single role.
// (GET /roles/{id})
func (_ Unimplemented) GetRolesItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a role.
// (PUT /roles/{id})
func (_ Unimplemented) PutRolesItem(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the entitlements of a role.
// (GET /roles/{id}/entitlements)
func (_ Unimplemented) GetRolesItemEntitlements(w http.ResponseWriter, r *http.Request, id string, params GetRolesItemEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add or remove a direct entitlements to/from a role.
// (PATCH /roles/{id}/entitlements)
func (_ Unimplemented) PatchRolesItemEntitlements(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns the OpenAPI spec as a JSON file.
// (GET /swagger.json)
func (_ Unimplemented) SwaggerJson(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetIdentityProviders operation middleware
func (siw *ServerInterfaceWrapper) GetIdentityProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdentityProvidersParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentityProviders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIdentityProviders operation middleware
func (siw *ServerInterfaceWrapper) PostIdentityProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIdentityProviders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAvailableIdentityProviders operation middleware
func (siw *ServerInterfaceWrapper) GetAvailableIdentityProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAvailableIdentityProvidersParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAvailableIdentityProviders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteIdentityProvidersItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteIdentityProvidersItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteIdentityProvidersItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIdentityProvidersItem operation middleware
func (siw *ServerInterfaceWrapper) GetIdentityProvidersItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentityProvidersItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutIdentityProvidersItem operation middleware
func (siw *ServerInterfaceWrapper) PutIdentityProvidersItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutIdentityProvidersItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCapabilities operation middleware
func (siw *ServerInterfaceWrapper) GetCapabilities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCapabilities(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlements operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementsParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlements(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRawEntitlements operation middleware
func (siw *ServerInterfaceWrapper) GetRawEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRawEntitlements(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostGroups operation middleware
func (siw *ServerInterfaceWrapper) PostGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostGroups(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteGroupsItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupsItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGroupsItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGroupsItem operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupsItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutGroupsItem operation middleware
func (siw *ServerInterfaceWrapper) PutGroupsItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutGroupsItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGroupsItemEntitlements operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsItemEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsItemEntitlementsParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupsItemEntitlements(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchGroupsItemEntitlements operation middleware
func (siw *ServerInterfaceWrapper) PatchGroupsItemEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchGroupsItemEntitlements(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGroupsItemIdentities operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsItemIdentities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsItemIdentitiesParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupsItemIdentities(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchGroupsItemIdentities operation middleware
func (siw *ServerInterfaceWrapper) PatchGroupsItemIdentities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchGroupsItemIdentities(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGroupsItemRoles operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsItemRoles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsItemRolesParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupsItemRoles(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchGroupsItemRoles operation middleware
func (siw *ServerInterfaceWrapper) PatchGroupsItemRoles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchGroupsItemRoles(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIdentities operation middleware
func (siw *ServerInterfaceWrapper) GetIdentities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdentitiesParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentities(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIdentities operation middleware
func (siw *ServerInterfaceWrapper) PostIdentities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIdentities(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteIdentitiesItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteIdentitiesItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteIdentitiesItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIdentitiesItem operation middleware
func (siw *ServerInterfaceWrapper) GetIdentitiesItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentitiesItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutIdentitiesItem operation middleware
func (siw *ServerInterfaceWrapper) PutIdentitiesItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutIdentitiesItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIdentitiesItemEntitlements operation middleware
func (siw *ServerInterfaceWrapper) GetIdentitiesItemEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdentitiesItemEntitlementsParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentitiesItemEntitlements(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchIdentitiesItemEntitlements operation middleware
func (siw *ServerInterfaceWrapper) PatchIdentitiesItemEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchIdentitiesItemEntitlements(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIdentitiesItemGroups operation middleware
func (siw *ServerInterfaceWrapper) GetIdentitiesItemGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdentitiesItemGroupsParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentitiesItemGroups(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchIdentitiesItemGroups operation middleware
func (siw *ServerInterfaceWrapper) PatchIdentitiesItemGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchIdentitiesItemGroups(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIdentitiesItemRoles operation middleware
func (siw *ServerInterfaceWrapper) GetIdentitiesItemRoles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdentitiesItemRolesParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentitiesItemRoles(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchIdentitiesItemRoles operation middleware
func (siw *ServerInterfaceWrapper) PatchIdentitiesItemRoles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchIdentitiesItemRoles(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetResources operation middleware
func (siw *ServerInterfaceWrapper) GetResources(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "entityType" -------------

	err = runtime.BindQueryParameter("form", true, false, "entityType", r.URL.Query(), &params.EntityType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entityType", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResources(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRoles operation middleware
func (siw *ServerInterfaceWrapper) GetRoles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRolesParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRoles operation middleware
func (siw *ServerInterfaceWrapper) PostRoles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRoles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteRolesItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteRolesItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRolesItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRolesItem operation middleware
func (siw *ServerInterfaceWrapper) GetRolesItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRolesItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutRolesItem operation middleware
func (siw *ServerInterfaceWrapper) PutRolesItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutRolesItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRolesItemEntitlements operation middleware
func (siw *ServerInterfaceWrapper) GetRolesItemEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRolesItemEntitlementsParams

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Next-Page-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Next-Page-Token")]; found {
		var NextPageToken PaginationNextTokenHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Next-Page-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Next-Page-Token", valueList[0], &NextPageToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Next-Page-Token", Err: err})
			return
		}

		params.NextPageToken = &NextPageToken

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRolesItemEntitlements(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchRolesItemEntitlements operation middleware
func (siw *ServerInterfaceWrapper) PatchRolesItemEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchRolesItemEntitlements(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SwaggerJson operation middleware
func (siw *ServerInterfaceWrapper) SwaggerJson(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SwaggerJson(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/authentication", wrapper.GetIdentityProviders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/authentication", wrapper.PostIdentityProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/authentication/providers", wrapper.GetAvailableIdentityProviders)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/authentication/{id}", wrapper.DeleteIdentityProvidersItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/authentication/{id}", wrapper.GetIdentityProvidersItem)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/authentication/{id}", wrapper.PutIdentityProvidersItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/capabilities", wrapper.GetCapabilities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/entitlements", wrapper.GetEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/entitlements/raw", wrapper.GetRawEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups", wrapper.GetGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/groups", wrapper.PostGroups)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/groups/{id}", wrapper.DeleteGroupsItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups/{id}", wrapper.GetGroupsItem)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/groups/{id}", wrapper.PutGroupsItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups/{id}/entitlements", wrapper.GetGroupsItemEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/groups/{id}/entitlements", wrapper.PatchGroupsItemEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups/{id}/identities", wrapper.GetGroupsItemIdentities)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/groups/{id}/identities", wrapper.PatchGroupsItemIdentities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups/{id}/roles", wrapper.GetGroupsItemRoles)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/groups/{id}/roles", wrapper.PatchGroupsItemRoles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/identities", wrapper.GetIdentities)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/identities", wrapper.PostIdentities)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/identities/{id}", wrapper.DeleteIdentitiesItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/identities/{id}", wrapper.GetIdentitiesItem)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/identities/{id}", wrapper.PutIdentitiesItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/identities/{id}/entitlements", wrapper.GetIdentitiesItemEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/identities/{id}/entitlements", wrapper.PatchIdentitiesItemEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/identities/{id}/groups", wrapper.GetIdentitiesItemGroups)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/identities/{id}/groups", wrapper.PatchIdentitiesItemGroups)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/identities/{id}/roles", wrapper.GetIdentitiesItemRoles)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/identities/{id}/roles", wrapper.PatchIdentitiesItemRoles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/resources", wrapper.GetResources)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/roles", wrapper.GetRoles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/roles", wrapper.PostRoles)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/roles/{id}", wrapper.DeleteRolesItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/roles/{id}", wrapper.GetRolesItem)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/roles/{id}", wrapper.PutRolesItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/roles/{id}/entitlements", wrapper.GetRolesItemEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/roles/{id}/entitlements", wrapper.PatchRolesItemEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/swagger.json", wrapper.SwaggerJson)
	})

	return r
}
